/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/dgerd/daytona-binding/pkg/apis/daytonabinding/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DaytonaBindingLister helps list DaytonaBindings.
type DaytonaBindingLister interface {
	// List lists all DaytonaBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DaytonaBinding, err error)
	// DaytonaBindings returns an object that can list and get DaytonaBindings.
	DaytonaBindings(namespace string) DaytonaBindingNamespaceLister
	DaytonaBindingListerExpansion
}

// daytonaBindingLister implements the DaytonaBindingLister interface.
type daytonaBindingLister struct {
	indexer cache.Indexer
}

// NewDaytonaBindingLister returns a new DaytonaBindingLister.
func NewDaytonaBindingLister(indexer cache.Indexer) DaytonaBindingLister {
	return &daytonaBindingLister{indexer: indexer}
}

// List lists all DaytonaBindings in the indexer.
func (s *daytonaBindingLister) List(selector labels.Selector) (ret []*v1alpha1.DaytonaBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DaytonaBinding))
	})
	return ret, err
}

// DaytonaBindings returns an object that can list and get DaytonaBindings.
func (s *daytonaBindingLister) DaytonaBindings(namespace string) DaytonaBindingNamespaceLister {
	return daytonaBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DaytonaBindingNamespaceLister helps list and get DaytonaBindings.
type DaytonaBindingNamespaceLister interface {
	// List lists all DaytonaBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DaytonaBinding, err error)
	// Get retrieves the DaytonaBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DaytonaBinding, error)
	DaytonaBindingNamespaceListerExpansion
}

// daytonaBindingNamespaceLister implements the DaytonaBindingNamespaceLister
// interface.
type daytonaBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DaytonaBindings in the indexer for a given namespace.
func (s daytonaBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DaytonaBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DaytonaBinding))
	})
	return ret, err
}

// Get retrieves the DaytonaBinding from the indexer for a given namespace and name.
func (s daytonaBindingNamespaceLister) Get(name string) (*v1alpha1.DaytonaBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("daytonabinding"), name)
	}
	return obj.(*v1alpha1.DaytonaBinding), nil
}
